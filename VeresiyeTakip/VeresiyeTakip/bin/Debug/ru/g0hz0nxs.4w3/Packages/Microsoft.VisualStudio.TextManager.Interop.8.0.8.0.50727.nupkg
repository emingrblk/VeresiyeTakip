g,System.Object)">
             <summary>
             Adds an operation to drop an existing column.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table">
             The name of the table to drop the column from. Schema name is optional, if no schema is specified
             then dbo is assumed.
             </param>
             <param name="name"> The name of the column to be dropped. </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
             <summary>
             Adds an operation to drop an existing column.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table">
             The name of the table to drop the column from. Schema name is optional, if no schema is specified
             then dbo is assumed.
             </param>
             <param name="name"> The name of the column to be dropped. </param>
             <param name="removedAnnotations">Custom annotations that exist on the column that is being dropped. May be null or empty.</param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.AlterColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
             <summary>
             Adds an operation to alter the definition of an existing column.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table">
             The name of the table the column exists in. Schema name is optional, if no schema is specified
             then dbo is assumed.
             </param>
             <param name="name"> The name of the column to be changed. </param>
             <param name="columnAction">
             An action that specifies the new definition for the column. i.e. c => c.String(nullable:
             false, defaultValue: "none")
             </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String,System.String,System.Boolean,System.Object)">
             <summary>
             Adds an operation to create a new primary key.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table">
             The table that contains the primary key column. Schema name is optional, if no schema is specified
             then dbo is assumed.
             </param>
             <param name="column"> The primary key column. </param>
             <param name="name">
             The name of the primary key in the database. If no value is supplied a unique name will be
             generated.
             </param>
             <param name="clustered"> A value indicating whether or not this is a clustered primary key. </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String[],System.String,System.Boolean,System.Object)">
             <summary>
             Adds an operation to create a new primary key based on multiple columns.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table">
             The table that contains the primary key columns. Schema name is optional, if no schema is
             specified then dbo is assumed.
             </param>
             <param name="columns"> The primary key columns. </param>
             <param name="name">
             The name of the primary key in the database. If no value is supplied a unique name will be
             generated.
             </param>
             <param name="clustered"> A value indicating whether or not this is a clustered primary key. </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.String,System.Object)">
             <summary>
             Adds an operation to drop an existing primary key that does not have the default name.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table">
             The table that contains the primary key column. Schema name is optional, if no schema is specified
             then dbo is assumed.
             </param>
             <param name="name"> The name of the primary key to be dropped. </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.Object)">
             <summary>
             Adds an operation to drop an existing primary key that was created with the default name.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table">
             The table that contains the primary key column. Schema name is optional, if no schema is specified
             then dbo is assumed.
             </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String,System.Boolean,System.String,System.Boolean,System.Object)">
             <summary>
             Adds an operation to create an index on a single column.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table">
             The name of the table to create the index on. Schema name is optional, if no schema is specified
             then dbo is assumed.
             </param>
             <param name="column"> The name of the column to create the index on. </param>
             <param name="unique">
             A value indicating if this is a unique index. If no value is supplied a non-unique index will be
             created.
             </param>
             <param name="name">
             The name to use for the index in the database. If no value is supplied a unique name will be
             generated.
             </param>
             <param name="clustered"> A value indicating whether or not this is a clustered index. </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String[],System.Boolean,System.String,System.Boolean,System.Object)">
             <summary>
             Adds an operation to create an index on multiple columns.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table">
             The name of the table to create the index on. Schema name is optional, if no schema is specified
             then dbo is assumed.
             </param>
             <param name="columns"> The name of the columns to create the index on. </param>
             <param name="unique">
             A value indicating if this is a unique index. If no value is supplied a non-unique index will be
             created.
             </param>
             <param name="name">
             The name to use for the index in the database. If no value is supplied a unique name will be
             generated.
             </param>
             <param name="clustered"> A value indicating whether or not this is a clustered index. </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String,System.Object)">
             <summary>
             Adds an operation to drop an index based on its name.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table">
             The name of the table to drop the index from. Schema name is optional, if no schema is specified
             then dbo is assumed.
             </param>
             <param name="name"> The name of the index to be dropped. </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String[],System.Object)">
             <summary>
             Adds an operation to drop an index based on the columns it targets.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table">
             The name of the table to drop the index from. Schema name is optional, if no schema is specified
             then dbo is assumed.
             </param>
             <param name="columns"> The name of the column(s) the index targets. </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.RenameIndex(System.String,System.String,System.String,System.Object)">
             <summary>
             Adds an operation to rename an index.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="table">
             The name of the table that contains the index to be renamed. Schema name is optional, if no
             schema is specified then dbo is assumed.
             </param>
             <param name="name"> The name of the index to be renamed. </param>
             <param name="newName"> The new name for the index. </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.Sql(System.String,System.Boolean,System.Object)">
             <summary>
             Adds an operation to execute a SQL command or set of SQL commands.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="sql"> The SQL to be executed. </param>
             <param name="suppressTransaction">
             A value indicating if the SQL should be executed outside of the transaction being
             used for the migration process. If no value is supplied the SQL will be executed within the transaction.
             </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.SqlFile(System.String,System.Boolean,System.Object)">
             <summary>
             Adds an operation to execute a SQL file.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="sqlFile"> 
             The SQL file to be executed.  Relative paths are assumed to be relative to the current AppDomain's BaseDirectory.
             </param>
             <param name="suppressTransaction">
             A value indicating if the SQL should be executed outside of the transaction being
             used for the migration process. If no value is supplied the SQL will be executed within the transaction.
             </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.SqlResource(System.String,System.Reflection.Assembly,System.Boolean,System.Object)">
             <summary>
             Adds an operation to execute a SQL resource file.
            
             Entity Framework Migrations APIs are not designed to accept input provided by untrusted sources 
             (such as the end user of an application). If input is accepted from such sources it should be validated 
             before being passed to these APIs to protect against SQL injection attacks etc.
             </summary>
             <param name="sqlResource"> The manifest resource name of the SQL resource file to be executed. </param>
             <param name="resourceAssembly">
             The assembly containing the resource file. The calling assembly is assumed if not provided.
             </param>
             <param name="suppressTransaction">
             A value indicating if the SQL should be executed outside of the transaction being
             used for the migration process. If no value is supplied the SQL will be executed within the transaction.
             </param>
             <param name="anonymousArguments">
             Additional arguments that may be processed by providers. Use anonymous type syntax to
             specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
             </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.System#Data#Entity#Migrations#Infrastructure#IDbMigration#AddOperation(System.Data.Entity.Migrations.Model.MigrationOperation)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.GetType">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigration.MemberwiseClone">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration">
            <summary>
            Configuration relating to the use of migrations for a given model.
            You will typically create a configuration class that derives
            from <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1"/> rather than
            using this class.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Migrations.DbMigrationsConfiguration.DefaultMigrationsDirectory">
            <summary>
            The default directory that migrations are stored in.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.#ctor">
            <summary>
            Initializes a new instance of the DbMigrationsConfiguration class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetSqlGenerator(System.String,System.Data.Entity.Migrations.Sql.MigrationSqlGenerator)">
            <summary>
            Adds a new SQL generator to be used for a given database provider.
            </summary>
            <param name="providerInvariantName"> Name of the database provider to set the SQL generator for. </param>
            <param name="migrationSqlGenerator"> The SQL generator to be used. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetSqlGenerator(System.String)">
            <summary>
            Gets the SQL generator that is set to be used with a given database provider.
            </summary>
            <param name="providerInvariantName"> Name of the database provider to get the SQL generator for. </param>
            <returns> The SQL generator that is set for the database provider. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetHistoryContextFactory(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
            <summary>
            Adds a new factory for creating <see cref="T:System.Data.Entity.Migrations.History.HistoryContext"/> instances to be used for a given database provider.
            </summary>
            <param name="providerInvariantName"> Name of the database provider to set the SQL generator for. </param>
            <param name="factory">
            A factory for creating <see cref="T:System.Data.Entity.Migrations.History.HistoryContext"/> instances for a given <see cref="T:System.Data.Common.DbConnection"/> and
            <see cref="T:System.String"/> representing the default schema.
            </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetHistoryContextFactory(System.String)">
            <summary>
            Gets the history context factory that is set to be used with a given database provider.
            </summary>
            <param name="providerInvariantName"> Name of the database provider to get thefactory for. </param>
            <returns> The history context factory that is set for the database provider. </returns>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationsEnabled">
            <summary>
            Gets or sets a value indicating if automatic migrations can be used when migrating the database.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextKey">
            <summary>
            Gets or sets the string used to distinguish migrations belonging to this configuration
            from migrations belonging to other configurations using the same database.
            This property enables migrations from multiple different models to be applied to a single database.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationDataLossAllowed">
            <summary>
            Gets or sets a value indicating if data loss is acceptable during automatic migration.
            If set to false an exception will be thrown if data loss may occur as part of an automatic migration.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextType">
            <summary>
            Gets or sets the derived DbContext representing the model to be migrated.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsNamespace">
            <summary>
            Gets or sets the namespace used for code-based migrations.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsDirectory">
            <summary>
            Gets or sets the sub-directory that code-based migrations are stored in.
            Note that this property must be set to a relative path for a sub-directory under the
            Visual Studio project root; it cannot be set to an absolute path.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CodeGenerator">
            <summary>
            Gets or sets the code generator to be used when scaffolding migrations.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsAssembly">
            <summary>
            Gets or sets the assembly containing code-based migrations.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.TargetDatabase">
            <summary>
            Gets or sets a value to override the connection of the database to be migrated.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CommandTimeout">
            <summary>
            Gets or sets the timeout value used for the individual commands within a
            migration. A null value indicates that the default value of the underlying
            provider will be used.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1">
            <summary>
            Configuration relating to the use of migrations for a given model.
            </summary>
            <typeparam name="TContext"> The context representing the model that this configuration applies to. </typeparam>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.#ctor">
            <summary>
            Initializes a new instance of the DbMigrationsConfiguration class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Seed(`0)">
            <summary>
            Runs after upgrading to the latest migration to allow seed data to be updated.
            </summary>
            <remarks>
            Note that the database may already contain seed data when this method runs. This means that
            implementations of this method must check whether or not seed data is present and/or up-to-date
            and then only make changes if necessary and in a non-destructive way. The 
            <see cref="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])"/>
            can be used to help with this, but for seeding large amounts of data it may be necessary to do less
            granular checks if performance is an issue.
            If the <see cref="T:System.Data.Entity.MigrateDatabaseToLatestVersion`2"/> database 
            initializer is being used, then this method will be called each time that the initializer runs.
            If one of the <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1"/>, <see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1"/>,
            or <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1"/> initializers is being used, then this method will not be
            called and the Seed method defined in the initializer should be used instead.
            </remarks>
            <param name="context"> Context to be used for updating seed data. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetType">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.MemberwiseClone">
            <inheritdoc />
        </member>
        <member name="T:System.Data.Entity.Migrations.DbMigrator">
            <summary>
            DbMigrator is used to apply existing migrations to a database.
            DbMigrator can be used to upgrade and downgrade to any given migration.
            To scaffold migrations based on changes to your model use <see cref="T:System.Data.Entity.Migrations.Design.MigrationScaffolder"/>
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorBase">
            <summary>
            Base class for decorators that wrap the core <see cref="T:System.Data.Entity.Migrations.DbMigrator"/>
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
            <summary>
            Initializes a new instance of the MigratorBase class.
            </summary>
            <param name="innerMigrator"> The migrator that this decorator is wrapping. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetPendingMigrations">
            <summary>
            Gets a list of the pending migrations that have not been applied to the database.
            </summary>
            <returns> List of migration Ids </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update">
            <summary>
            Updates the target database to the latest migration.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update(System.String)">
            <summary>
            Updates the target database to a given migration.
            </summary>
            <param name="targetMigration"> The migration to upgrade/downgrade to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetLocalMigrations">
            <summary>
            Gets a list of the migrations that are defined in the assembly.
            </summary>
            <returns> List of migration Ids </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetDatabaseMigrations">
            <summary>
            Gets a list of the migrations that have been applied to the database.
            </summary>
            <returns> List of migration Ids </returns>
        </member>
        <member name="P:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Configuration">
            <summary>
            Gets the configuration being used for the migrations process.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Migrations.DbMigrator.InitialDatabase">
            <summary>
            Migration Id representing the state of the database before any migrations are applied.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrator.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
            <summary>
            Initializes a new instance of the DbMigrator class.
            </summary>
            <param name="configuration"> Configuration to be used for the migration process. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrator.GetLocalMigrations">
            <summary>
            Gets all migrations that are defined in the configured migrations assembly.
            </summary>
            <returns>The list of migrations.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrator.GetDatabaseMigrations">
            <summary>
            Gets all migrations that have been applied to the target database.
            </summary>
            <returns>The list of migrations.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrator.GetPendingMigrations">
            <summary>
            Gets all migrations that are defined in the assembly but haven't been applied to the target database.
            </summary>
            <returns>The list of migrations.</returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbMigrator.Update(System.String)">
            <summary>
            Updates the target database to a given migration.
            </summary>
            <param name="targetMigration"> The migration to upgrade/downgrade to. </param>
        </member>
        <member name="P:System.Data.Entity.Migrations.DbMigrator.Configuration">
            <summary>
            Gets the configuration that is being used for the migration process.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.DbSetMigrationsExtensions">
            <summary>
            A set of extension methods for <see cref="T:System.Data.Entity.IDbSet`1"/>
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])">
            <summary>
            Adds or updates entities by key when SaveChanges is called. Equivalent to an "upsert" operation
            from database terminology.
            This method can useful when seeding data using Migrations.
            </summary>
            <typeparam name="TEntity">The type of entities to add or update.</typeparam>
            <param name="set">The set to which the entities belong.</param>
            <param name="entities"> The entities to add or update. </param>
            <remarks>
            When the <paramref name="set" /> parameter is a custom or fake IDbSet implementation, this method will
            attempt to locate and invoke a public, instance method with the same signature as this extension method.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0[])">
            <summary>
            Adds or updates entities by a custom identification expression when SaveChanges is called.
            Equivalent to an "upsert" operation from database terminology.
            This method can useful when seeding data using Migrations.
            </summary>
            <typeparam name="TEntity">The type of entities to add or update.</typeparam>
            <param name="set">The set to which the entities belong.</param>
            <param name="identifierExpression"> An expression specifying the properties that should be used when determining whether an Add or Update operation should be performed. </param>
            <param name="entities"> The entities to add or update. </param>
            <remarks>
            When the <paramref name="set" /> parameter is a custom or fake IDbSet implementation, this method will
            attempt to locate and invoke a public, instance method with the same signature as this extension method.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator">
            <summary>
            Generates C# code for a code-based migration.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator">
            <summary>
            Base class for providers that generate code for code-based migrations.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
            <summary>
            Generates the code that should be added to the users project.
            </summary>
            <param name="migrationId"> Unique identifier of the migration. </param>
            <param name="operations"> Operations to be performed by the migration. </param>
            <param name="sourceModel"> Source model to be stored in the migration metadata. </param>
            <param name="targetModel"> Target model to be stored in the migration metadata. </param>
            <param name="namespace"> Namespace that code should be generated in. </param>
            <param name="className"> Name of the class that should be generated. </param>
            <returns> The generated code. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetNamespaces(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation})">
            <summary>
            Gets the namespaces that must be output as "using" or "Imports" directives to handle
            the code generated by the given operations.
            </summary>
            <param name="operations"> The operations for which code is going to be generated. </param>
            <returns> An ordered list of namespace names. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetDefaultNamespaces(System.Boolean)">
            <summary>
            Gets the default namespaces that must be output as "using" or "Imports" directives for
            any code generated.
            </summary>
            <param name="designer"> A value indicating if this class is being generated for a code-behind file. </param>
            <returns> An ordered list of namespace names. </returns>
        </member>
        <member name="P:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.AnnotationGenerators">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator"/> instances that are being used.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
            <summary>
            Generates the primary code file that the user can view and edit.
            </summary>
            <param name="operations"> Operations to be performed by the migration. </param>
            <param name="namespace"> Namespace that code should be generated in. </param>
            <param name="className"> Name of the class that should be generated. </param>
            <returns> The generated code. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Generates the code behind file with migration metadata.
            </summary>
            <param name="migrationId"> Unique identifier of the migration. </param>
            <param name="sourceModel"> Source model to be stored in the migration metadata. </param>
            <param name="targetModel"> Target model to be stored in the migration metadata. </param>
            <param name="namespace"> Namespace that code should be generated in. </param>
            <param name="className"> Name of the class that should be generated. </param>
            <returns> The generated code. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates a property to return the source or target model in the code behind file.
            </summary>
            <param name="name"> Name of the property. </param>
            <param name="value"> Value to be returned. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassAttributes(System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
            <summary>
            Generates class attributes.
            </summary>
            <param name="writer"> Text writer to add the generated code to. </param>
            <param name="designer"> A value indicating if this class is being generated for a code-behind file. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates a namespace, using statements and class definition.
            </summary>
            <param name="namespace"> Namespace that code should be generated in. </param>
            <param name="className"> Name of the class that should be generated. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
            <param name="base"> Base class for the generated class. </param>
            <param name="designer"> A value indicating if this class is being generated for a code-behind file. </param>
            <param name="namespaces"> Namespaces for which using directives will be added. If null, then the namespaces returned from GetDefaultNamespaces will be used. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates the closing code for a class that was started with WriteClassStart.
            </summary>
            <param name="namespace"> Namespace that code should be generated in. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation"/>.
            </summary>
            <param name="addColumnOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation"/>.
            </summary>
            <param name="dropColumnOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation"/>.
            </summary>
            <param name="alterColumnOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code for to re-create the given dictionary of annotations for use when passing
            these annotations as a parameter of a <see cref="T:System.Data.Entity.Migrations.DbMigration"/>. call.
            </summary>
            <param name="annotations">The annotations to generate.</param>
            <param name="writer">The writer to which generated code should be written.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code for to re-create the given dictionary of annotations for use when passing
            these annotations as a parameter of a <see cref="T:System.Data.Entity.Migrations.DbMigration"/>. call.
            </summary>
            <param name="annotations">The annotations to generate.</param>
            <param name="writer">The writer to which generated code should be written.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotation(System.String,System.Object,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code for the given annotation value, which may be null. The default behavior is to use an
            <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator"/> if one is registered, otherwise call ToString on the annotation value.
            </summary>
            <remarks>
            Note that a <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator"/> can be registered to generate code for custom annotations
            without the need to override the entire code generator.
            </remarks>
            <param name="name">The name of the annotation for which code is needed.</param>
            <param name="annotation">The annotation value to generate.</param>
            <param name="writer">The writer to which generated code should be written.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" />.</summary>
            <param name="createProcedureOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" />.</summary>
            <param name="alterProcedureOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ParameterModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
            <summary>Generates code to specify the definition for a <see cref="T:System.Data.Entity.Migrations.Model.ParameterModel" />.</summary>
            <param name="parameterModel">The parameter definition to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
            <param name="emitName">A value indicating whether to include the column name in the definition.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" />.</summary>
            <param name="dropProcedureOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation"/>.
            </summary>
            <param name="createTableOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code for an <see cref="T:System.Data.Entity.Migrations.Model.AlterTableOperation"/>.
            </summary>
            <param name="alterTableOperation">The operation for which code should be generated.</param>
            <param name="writer">The writer to which generated code should be written.</param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation"/> as part of a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation"/>.
            </summary>
            <param name="addPrimaryKeyOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation"/> as part of a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation"/>.
            </summary>
            <param name="addForeignKeyOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation"/> as part of a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation"/>.
            </summary>
            <param name="createIndexOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to specify a set of column names using a lambda expression.
            </summary>
            <param name="columns"> The columns to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation"/>.
            </summary>
            <param name="addPrimaryKeyOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation"/>.
            </summary>
            <param name="dropPrimaryKeyOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation"/>.
            </summary>
            <param name="addForeignKeyOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation"/>.
            </summary>
            <param name="dropForeignKeyOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation"/>.
            </summary>
            <param name="createIndexOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation"/>.
            </summary>
            <param name="dropIndexOperation"> The operation to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
            <summary>
            Generates code to specify the definition for a <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel"/>.
            </summary>
            <param name="column"> The column definition to generate code for. </param>
            <param name="writer"> Text writer to add the generated code to. </param>
            <param name="emitName"> A value indicating whether to include the column name in the definition. </param>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte[])">
            <summary>
            Generates code to specify the default value for a <see cref="T:byte[]" /> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTime)">
            <summary>
            Generates code to specify the default value for a <see cref="T:System.DateTime"/> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTimeOffset)">
            <summary>
            Generates code to specify the default value for a <see cref="T:System.DateTimeOffset"/> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Decimal)">
            <summary>
            Generates code to specify the default value for a <see cref="T:System.Decimal"/> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Guid)">
            <summary>
            Generates code to specify the default value for a <see cref="T:System.Guid"/> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Int64)">
            <summary>
            Generates code to specify the default value for a <see cref="T:System.Int64"/> column.
            </summary>
            <param name="defaultValue"> The value to be used as the default. </param>
            <returns> Code representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Single)">
            <summary>
            Generates code to specify the default value for a <see cref="T:System.Single"/> column.
            </summ